[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"online home Geocomputación con R, book geographic data analysis, visualization modeling.Note: first edition book published CRC Press R Series.\ncan buy book CRC Press, Amazon.Inspired bookdown Free Open Source Software Geospatial (FOSS4G) movement, book open source.\nensures contents reproducible publicly accessible people worldwide.online version book hosted geocompr.robinlovelace.net kept --date GitHub Actions, provides information ‘build status’ follows:version book built GH Actions 2021-09-20.","code":""},{"path":"index.html","id":"how-to-contribute","chapter":"Welcome","heading":"How to contribute?","text":"bookdown makes editing book easy editing wiki, provided GitHub account (sign-github.com).\nlogged-GitHub, click ‘Edit page’ icon right panel book website.\ntake editable version source R Markdown file generated page ’re .raise issue book’s content (e.g. code running) make feature request, check-issue tracker.Maintainers contributors must follow repository’s CODE CONDUCT.","code":""},{"path":"index.html","id":"reproducibility","chapter":"Welcome","heading":"Reproducibility","text":"reproduce code book, need recent version R --date packages.\ncan installed following command (requires remotes):build book locally, clone download geocompr repo, load R root directory (e.g., opening geocompr.Rproj RStudio) run following lines:","code":"\nremotes::install_github(\"geocompr/geocompkg\")\nbookdown::render_book(\"index.Rmd\") # to build the book\nbrowseURL(\"_book/index.html\") # to view it"},{"path":"index.html","id":"supporting-the-project","chapter":"Welcome","heading":"Supporting the project","text":"find book useful, please support :Telling people personCommunicating book digital media, e.g., via #geocompr hashtag Twitter (see Guestbook geocompr.github.io) letting us know courses using bookCiting linking-‘Starring’ geocompr GitHub repositoryReviewing , e.g., Amazon GoodreadsAsking questions making suggestion content via GitHub Twitter.Buying copyFurther details can found github.com/Robinlovelace/geocompr.work licensed Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.","code":""},{"path":"foreword.html","id":"foreword","chapter":"Foreword","heading":"Foreword","text":"‘spatial’ R always broad, seeking provide integrate tools geography, geoinformatics, geocomputation spatial statistics anyone interested joining : joining asking interesting questions, contributing fruitful research questions, writing improving code.\n, ‘spatial’ R always included open source code, open data reproducibility.‘spatial’ R also sought open interaction many branches applied spatial data analysis, also implement new advances data representation methods analysis expose cross-disciplinary scrutiny.\nbook demonstrates, often alternative workflows similar data similar results, may learn comparisons others create understand workflows.\nincludes learning similar communities around Open Source GIS complementary languages Python, Java .R’s wide range spatial capabilities never evolved without people willing share creating adapting.\nmight include teaching materials, software, research practices (reproducible research, open data), combinations .\nR users also benefitted greatly ‘upstream’ open source geo libraries GDAL, GEOS PROJ.book clear example , curious willing join , can find things need match aptitudes.\nadvances data representation workflow alternatives, ever increasing numbers new users often without applied quantitative command-line exposure, book kind really needed.\nDespite effort involved, authors supported pressing forward publication., fresh book ready go; authors tried many tutorials workshops, readers instructors able benefit knowing contents continue tried people like .\nEngage authors wider R-spatial community, see value choice building workflows important, enjoy applying learn things care .Roger BivandBergen, September 2018","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"who-this-book-is-for","chapter":"Preface","heading":"Who this book is for","text":"book people want analyze, visualize model geographic data open source software.\nbased R, statistical programming language powerful data processing, visualization geospatial capabilities.\nbook covers wide range topics interest wide range people many different backgrounds, especially:People learned spatial analysis skills using desktop Geographic Information System (GIS), QGIS, ArcGIS, GRASS SAGA, want access powerful (geo)statistical visualization programming language benefits command-line approach (Sherman 2008):\n\nadvent ‘modern’ GIS software, people want point click way life. ’s good, tremendous amount flexibility power waiting command line.\nPeople learned spatial analysis skills using desktop Geographic Information System (GIS), QGIS, ArcGIS, GRASS SAGA, want access powerful (geo)statistical visualization programming language benefits command-line approach (Sherman 2008):advent ‘modern’ GIS software, people want point click way life. ’s good, tremendous amount flexibility power waiting command line.Graduate students researchers fields specializing geographic data including Geography, Remote Sensing, Planning, GIS Geographic Data ScienceGraduate students researchers fields specializing geographic data including Geography, Remote Sensing, Planning, GIS Geographic Data ScienceAcademics post-graduate students working geographic data — fields Geology, Regional Science, Biology Ecology, Agricultural Sciences, Archaeology, Epidemiology, Transport Modeling, broadly defined Data Science — require power flexibility R researchAcademics post-graduate students working geographic data — fields Geology, Regional Science, Biology Ecology, Agricultural Sciences, Archaeology, Epidemiology, Transport Modeling, broadly defined Data Science — require power flexibility R researchApplied researchers analysts public, private third-sector organizations need reproducibility, speed flexibility command-line language R applications dealing spatial data diverse Urban Transport Planning, Logistics, Geo-marketing (store location analysis) Emergency PlanningApplied researchers analysts public, private third-sector organizations need reproducibility, speed flexibility command-line language R applications dealing spatial data diverse Urban Transport Planning, Logistics, Geo-marketing (store location analysis) Emergency PlanningThe book designed intermediate--advanced R users interested geocomputation R beginners prior experience geographic data.\nnew R geographic data, discouraged: provide links materials describe nature spatial data beginner’s perspective Chapter ?? links provided .","code":""},{"path":"preface.html","id":"how-to-read-this-book","chapter":"Preface","heading":"How to read this book","text":"book divided three parts:Part : Foundations, aimed getting --speed geographic data R.Part II: Extensions, covers advanced techniques.Part III: Applications, real-world problems.chapters get progressively harder recommend reading book order.\nmajor barrier geographical analysis R steep learning curve.\nchapters Part aim address providing reproducible code simple datasets ease process getting started.important aspect book teaching/learning perspective exercises end chapter.\nCompleting develop skills equip confidence needed tackle range geospatial problems.\nSolutions exercises, number extended examples, provided book’s supporting website, geocompr.github.io.Impatient readers welcome dive straight practical examples, starting Chapter ??.\nHowever, recommend reading wider context Geocomputación con R Chapter 1 first.\nnew R, also recommend learning language attempting run code chunks provided chapter (unless ’re reading book understanding concepts).\nFortunately R beginners R supportive community developed wealth resources can help.\nparticularly recommend three tutorials: R Data Science (Grolemund Wickham 2016) Efficient R Programming (Gillespie Lovelace 2016), especially Chapter 2 (installing setting-R/RStudio) Chapter 10 (learning learn), introduction R (Venables, Smith, Team 2017).","code":""},{"path":"preface.html","id":"why-r","chapter":"Preface","heading":"Why R?","text":"Although R steep learning curve, command-line approach advocated book can quickly pay .\n’ll learn subsequent chapters, R effective tool tackling wide range geographic data challenges.\nexpect , practice, R become program choice geospatial toolbox many applications.\nTyping executing commands command-line , many cases, faster pointing--clicking around graphical user interface (GUI) desktop GIS.\napplications Spatial Statistics modeling R may realistic way get work done.outlined Section ??, many reasons using R geocomputation:\nR well-suited interactive use required many geographic data analysis workflows compared languages.\nR excels rapidly growing fields Data Science (includes data carpentry, statistical learning techniques data visualization) Big Data (via efficient interfaces databases distributed computing systems).\nFurthermore R enables reproducible workflow: sharing scripts underlying analysis allow others build-work.\nensure reproducibility book made source code available github.com/Robinlovelace/geocompr.\nfind script files code/ folder generate figures:\ncode generating figure provided main text book, name script file generated provided caption (see example caption Figure ??).languages Python, Java C++ can used geocomputation excellent resources learning geocomputation without R, discussed Section ??.\nNone provide unique combination package ecosystem, statistical capabilities, visualization options, powerful IDEs offered R community.\nFurthermore, teaching use one language (R) depth, book equip concepts confidence needed geocomputation languages.","code":""},{"path":"preface.html","id":"real-world-impact","chapter":"Preface","heading":"Real-world impact","text":"Geocomputación con R equip knowledge skills tackle wide range issues, including scientific, societal environmental implications, manifested geographic data.\ndescribed Section ??, geocomputation using computers process geographic data:\nalso real-world impact.\ninterested wider context motivations behind book, read ; covered Chapter 1.","code":""},{"path":"preface.html","id":"acknowledgements","chapter":"Preface","heading":"Acknowledgements","text":"Many thanks everyone contributed directly indirectly via code hosting collaboration site GitHub, including following people contributed direct via pull requests: prosoitos, florisvdh, katygregg, rsbivand, KiranmayiV, zmbc, erstearns, MikeJohnPage, eyesofbambi, nickbearman, tyluRp, marcosci, giocomai, KHwong12, LaurieLBaker, MarHer90, mdsumner, pat-s, gisma, ateucher, annakrystalli, DarrellCarvalho, kant, gavinsimpson, Henrik-P, Himanshuteli, yutannihilation, jbixon13, yvkschaefer, katiejolly, layik, mpaulacaldas, mtennekes, mvl22, ganes1410, richfitz, wdearden, yihui, chihinl, cshancock, gregor-d, jasongrahn, p-kono, pokyah, schuetzingit, sdesabbata, tim-salabim, tszberkowitz.\nSpecial thanks Marco Sciaini, created front cover image, also published code generated (see code/frontcover.R book’s GitHub repo).\nDozens people contributed online, raising commenting issues, providing feedback via social media.\n#geocompr hashtag live !like thank John Kimmel CRC Press, worked us two years take ideas early book plan production via four rounds peer review.\nreviewers deserve special mention : detailed feedback expertise substantially improved book’s structure content.thank Patrick Schratz Alexander Brenning University Jena fruitful discussions input Chapters ?? ??.\nthank Emmanuel Blondel Food Agriculture Organization United Nations expert input section web services;\nMichael Sumner critical input many areas book, especially discussion algorithms Chapter 10;\nTim Appelhans David Cooley key contributions visualization chapter (Chapter 8);\nKaty Gregg, proofread every chapter greatly improved readability book.Countless others mentioned contributed myriad ways.\nfinal thank software developers make Geocomputación con R possible.\nEdzer Pebesma (created sf package), Robert Hijmans (created raster) Roger Bivand (laid foundations much R-spatial software) made high performance geographic computing possible R.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introducción","heading":"1 Introducción","text":"Este libro trata de utilizar el poder de los ordenadores para hacer cosas con los datos geográficos.\nEnseña una serie de habilidades espaciales, entre las que se incluyen: la lectura, escritura y manipulación de datos geográficos; la elaboración de mapas estáticos e interactivos; la aplicación de la geocomputación para resolver problemas del mundo real; y la modelización de fenómenos geográficos.\nAl demostrar cómo se pueden enlazar varias operaciones geográficas, en “trozos de código” reproducibles que intercalan la prosa, el libro también enseña un flujo de trabajo transparente y, por tanto, científico.\nAprender utilizar la gran cantidad de herramientas geoespaciales disponibles en la línea de comandos de R puede ser emocionante, pero crear otras nuevas puede ser realmente liberador.\nEl uso del enfoque basado en la línea de comandos que se enseña lo largo del libro, y las técnicas de programación que se tratan en el capítulo ??, pueden ayudar eliminar las restricciones tu creatividad impuestas por el software.\nPor lo tanto, después de leer el libro y completar los ejercicios, deberías sentirte capacitado con una sólida comprensión de las posibilidades abiertas por las impresionantes capacidades geográficas de R, nuevas habilidades para resolver problemas del mundo real con datos geográficos, y la capacidad de comunicar tu trabajo con mapas y código reproducible.En las últimas décadas, el software libre y de código abierto dedicado al ámbito geoespacial (FOSS4G) ha progresado un ritmo asombroso.\nGracias organizaciones como OSGeo, el análisis de datos geográficos ha dejado de ser algo exclusivo de quienes disponen de caros hardware y software: ahora cualquiera puede descargar y ejecutar bibliotecas espaciales de alto rendimiento.\nLos Sistemas de Información Geográfica (SIG, o GIS en inglés) de código abierto, como QGIS, han hecho accesible el análisis geográfico en todo el mundo. Los programas SIG tienden enfatizar las interfaces gráficas para el usuario (GUIs), con la consecuencia deseada de desalentar la reproducibilidad (aunque muchos pueden utilizarse desde la línea de comandos, como veremos en el capítulo ??).\nR, por el contrario, hace énfasis en la interfaz de la línea de comandos (CLI). Una comparación simplista entre los diferentes enfoques se ilustra en la Tabla 1.1.TABLE 1.1: Diferencias de énfasis entre los paquetes software (Interfaz gráfica del usuario (Graphical User Interface, GUI en inglés) de los Sistemas de Información Geográfica (GIS) y R).Este libro está motivado por la importancia de la reproducibilidad para la investigación científica (véase la nota inferior).\nSu objetivo es hacer más accesibles los flujos de trabajo de los análisis de datos geográficos reproducibles, y demostrar el poder del software geoespacial abierto disponible desde la línea de comandos.\n“Las interfaces para otros software forman parte de R” (Eddelbuettel Balamuta 2018).\nEsto significa que, además de las destacadas capacidades “internas”, R permite el acceso muchas otras bibliotecas de software espacial, explicadas en la sección ?? y demostradas en el capítulo ??.\nSin embargo, antes de entrar en los detalles del software, vale la pena dar un paso atrás y pensar en lo que entendemos por geocomputación.La reproducibilidad es una de las principales ventajas de las interfaces de línea de comandos, pero ¿qué significa en la práctica?\nLa definimos del siguiente modo:“Un proceso en el que los mismos resultados pueden ser generados por otros utilizando un código públicamente accesible”.","code":""},{"path":"intro.html","id":"qué-es-la-geocomputación","chapter":"1 Introducción","heading":"1.1 ¿Qué es la geocomputación?","text":"‘Geocomputación’ es un término joven, que se remonta la primera conferencia sobre el tema en 1996.1Lo que distingue la geocomputación del término comúnmente utilizado (en aquel momento) “geografía cuantitativa”, según propusieron sus primeros defensores, es su énfasis en las aplicaciones “creativas y experimentales” (Longley et al. 1998) y en el desarrollo de nuevas herramientas y métodos (Openshaw Abrahart 2000):\n“La geocomputación consiste en utilizar los distintos tipos de geodatos y en desarrollar geoherramientas relevantes dentro del contexto general de un enfoque ‘científico’”.\nEste libro pretende ir más allá de la enseñanza de los métodos y el código; al final de él, deberías ser capaz de utilizar tus conocimientos de geocomputación para realizar “un trabajo práctico que sea beneficioso o útil” (Openshaw Abrahart 2000).Sin embargo, nuestro enfoque difiere de los primeros en adoptarlo, como Stan Openshaw, en su énfasis en la reproducibilidad y la colaboración.\nprincipios del siglo XXI, era realista esperar que los lectores pudieran reproducir los ejemplos de código, debido las barreras que impedían el acceso al hardware, el software y los datos necesarios.\nSi avanzamos dos décadas, las cosas han progresado rápidamente.\nCualquiera que tenga acceso un ordenador portátil con aproximadamente 4 GB de RAM puede esperar de forma realista poder instalar y ejecutar software de geocomputación sobre conjuntos de datos de acceso público, que están más disponibles que nunca (como veremos en el capítulo ??).2\ndiferencia de los primeros trabajos en este campo, todo el trabajo presentado en este libro es reproducible utilizando el código y los datos de ejemplo proporcionados junto con el libro, en paquetes de R como spData, cuya instalación se trata en el capítulo ??.La geocomputación está estrechamente relacionada con otros términos como: Ciencia de la Información Geográfica (GIScience); Geomática; Geoinformática; Ciencia de la Información Espacial; Ingeniería de la Geoinformación (Longley 2015); y Ciencia de los Datos Geográficos (GDS).\nTodos los términos comparten el énfasis en un enfoque “científico” (que implica que es reproducible y falsable) influenciado por los SIG, aunque sus orígenes y principales campos de aplicación difieren.\nLa GDS, por ejemplo, enfatiza las habilidades de la “ciencia de datos” y los grandes conjuntos de datos, mientras que la Geoinformática tiende centrarse en las estructuras de datos.\nPero los solapamientos entre los términos son mayores que las diferencias entre ellos y utilizamos la geocomputación como un sinónimo aproximado que los engloba todos:\ntodos tratan de utilizar los datos geográficos para el trabajo científico aplicado.\nSin embargo, diferencia de los primeros usuarios del término, pretendemos dar entender que existe un campo académico cohesionado llamado “Geocomputación” (o “GeoComputación”, como lo llamaba Stan Openshaw).\nEn cambio, definimos el término de la siguiente manera: trabajar con datos geográficos de forma computacional, centrándose en el código, la reproducibilidad y la modularidad.La geocomputación es un término reciente pero está influenciado por ideas antiguas.\nPuede considerarse parte de la Geografía, la cual tiene más de 2000 años de historia (Talbert 2014); y una extensión de los Sistemas de Información Geográfica (SIG) (Neteler Mitasova 2008), los cuales surgieron en la década de 1960 (Coppock Rhind 1991).Sin embargo, la geografía ha desempeñado un papel importante la hora de explicar e influir la relación de la humanidad con el mundo natural mucho antes de la invención del ordenador.\nLos viajes de Alexander von Humboldt Sudamérica principios del siglo XIX ilustran este papel:\nlas observaciones resultantes solo sentaron las bases de las tradiciones de la geografía física y vegetal, sino que también allanaron el camino hacia las políticas de protección del mundo natural (Wulf 2015).\nEste libro pretende contribuir la “Tradición Geográfica” (Livingstone 1992) aprovechando la potencia de los ordenadores modernos y el software de código abierto.Los vínculos del libro con disciplinas más antiguas se reflejaron en los títulos sugeridos para el libro: Geografía con R y R para SIG.\nCada uno tiene sus ventajas.\nEl primero transmite el mensaje de que comprende mucho más que datos espaciales:\nlos datos de atributos espaciales se entremezclan inevitablemente con los datos geométricos, y la Geografía trata de algo más que de dónde está algo en el mapa.\nEl segundo comunica que este un libro sobre el uso de R como un SIG, para realizar operaciones espaciales sobre datos geográficos (Bivand, Pebesma, Gómez-Rubio 2013).\nSin embargo, el término SIG transmite algunas connotaciones (véase la Tabla 1.1) que simplemente comunican una de las mayores fortalezas de R:\nsu capacidad basada en la consola para cambiar sin problemas entre las tareas de procesamiento, modelado y visualización de datos geográficos y geográficos.\nPor el contrario, el término geocomputación implica una programación reproducible y creativa.\nPor supuesto, los algoritmos (geocomputacionales) son herramientas poderosas que pueden llegar ser altamente complejas.\nSin embargo, todos los algoritmos se componen de partes más pequeñas.\nAl enseñarte sus fundamentos y su estructura subyacente, pretendemos capacitarte para crear tus propias soluciones innovadoras los problemas de datos geográficos.","code":""},{"path":"intro.html","id":"por-qué-usar-r-para-la-geocomputación","chapter":"1 Introducción","heading":"1.2 ¿Por qué usar R para la geocomputación?","text":"Los primeros geógrafos utilizaron diversas herramientas, como barómetros, brújulas y sextantes, para avanzar en el conocimiento del mundo (Wulf 2015). Solo con la invención del cronómetro marino en 1761 fue posible calcular la longitud en el mar, lo que permitió los barcos tomar rutas más directas.Hoy en día es difícil imaginar tal falta de datos geográficos.\nTodos los teléfonos inteligentes tienen un receptor de posicionamiento global (GPS) y una multitud de sensores en dispositivos que van desde satélites y vehículos semiautónomos hasta científicos ciudadanos que miden incesantemente cada parte del mundo.\nEl ritmo de producción de datos es abrumador.\nUn vehículo autónomo, por ejemplo, puede generar 100 GB de datos al día (Economist 2016).\nLos datos de teledetección de los satélites se han vuelto demasiado grandes para analizar los datos correspondientes con un solo ordenador, lo que ha dado lugar iniciativas como OpenEO.Esta “revolución de los geodatos” impulsa la demanda de equipos informáticos de alto rendimiento y de software eficientes y escalables para manejar y extraer la señal del ruido, con el fin de comprender y quizás cambiar el mundo.\nLas bases de datos espaciales permiten almacenar y generar subconjuntos manejables de los vastos almacenes de datos geográficos, haciendo que las interfaces para obtener conocimientos de ellos sean herramientas vitales para el futuro.\nR es una de esas herramientas, con capacidades avanzadas de análisis, modelización y visualización.\nEn este contexto, el libro se centra en el lenguaje en sí (véase Wickham 2014).\nEn su lugar, utilizamos R como una “herramienta para trabajar” para entender el mundo, de forma similar al uso que Humboldt hizo de las herramientas para obtener una comprensión profunda de la naturaleza en toda su complejidad e interconexiones (véase Wulf 2015).\nAunque la programación puede parecer una actividad reduccionista, el objetivo es enseñar geocomputación con R solo por diversión, sino para entender el mundo.R es un lenguaje y entorno de código abierto y multiplataforma para la computación estadística y los gráficos (r-project.org/).\nCon una amplia gama de paquetes, R también permite la estadística geoespacial avanzada, la modelización y la visualización.\n\nLos nuevos entornos de desarrollo integrados (IDE), como RStudio, han hecho que R sea más fácil de usar para muchos, facilitando la elaboración de mapas con un panel dedicado la visualización interactiva.En su esencia, R es un lenguaje de programación funcional orientado objetos (Wickham 2014), y fue diseñado específicamente como una interfaz interactiva para otro software (Chambers 2016).\nEste último también incluye muchos “puentes” hacia el hallazgo de un tesoro del software SIG, “geolibrerías” y funciones (véase el capítulo ??).\nPor tanto, es ideal para crear rápidamente “geoherramientas”, sin necesidad de dominar lenguajes de nivel inferior (en comparación con R) como C, FORTRAN o Java (véase la sección ??).\n\nEsto puede ser como liberarse del metafórico “techo de cristal” impuesto por los sistemas de información geográfica basados en GUI o patentados (véase la Tabla 1.1 para una definición de GUI).\nAdemás, R facilita el acceso otros lenguajes:\nlos paquetes Rcpp y reticulate permiten acceder código de C++ y Python, por ejemplo.\nEsto significa que R puede utilizarse como “puente” hacia una amplia gama de programas geoespaciales (véase la sección ??).Otro ejemplo que muestra la flexibilidad y la evolución de las capacidades geográficas de R es la elaboración de mapas interactivos.\nComo veremos en el Capítulo ??, la afirmación de que R tiene “facilidades interactivas [para elaborar gráficos] limitadas” (Bivand, Pebesma, Gómez-Rubio 2013) ya es cierta.\nAsí lo demuestra el siguiente fragmento de código, que crea la Figura 1.1 (las funciones que generan el gráfico se tratan en la Sección ??).\nFIGURE 1.1: Los marcadores azules indican la procedencia de los autores. El mapa base es una imagen en mosaico de la Tierra de noche proporcionada por la NASA. Interactúa con la versión en línea en geocompr.robinlovelace.net, por ejemplo, ampliando la imagen y haciendo clic en las ventanas emergentes.\nHace unos años habría sido difícil elaborar la Figura 1.1 con R, más aún en forma de mapa interactivo.\nEsto ilustra la flexibilidad de R y cómo, gracias desarrollos como knitr y leaflet, puede utilizarse como interfaz con otro software, un tema que se repetirá lo largo de este libro.\nEl uso del código de R, por tanto, permite enseñar geocomputación con referencia ejemplos reproducibles como el proporcionado en la Figura 1.1 en lugar de conceptos abstractos.","code":"\nlibrary(leaflet)\npopup = c(\"Robin\", \"Jakub\", \"Jannes\", \"Mireia\")\nleaflet() %>%\n  addProviderTiles(\"NASAGIBS.ViirsEarthAtNight2012\") %>%\n  addMarkers(lng = c(-3, 23, 11, 2),\n             lat = c(52, 53, 49, 42), \n             popup = popup)"},{"path":"intro.html","id":"software-para-geocomputación","chapter":"1 Introducción","heading":"1.3 Software para geocomputación","text":"R es un poderoso lenguaje para la geocomputación, pero hay muchas otras opciones para el análisis de datos geográficos que ofrecen miles de funciones geográficas.\nEl conocimiento de otros lenguajes para la geocomputación ayudará decidir cuándo una herramienta diferente puede ser más apropiada para una tarea específica, y situar R en el amplio ecosistema geoespacial.\nEsta sección presenta brevemente los lenguajes C++, Java y Python para la geocomputación, como preparación para el capítulo ??.Una importante característica de R (y de Python) es que es un lenguaje interpretado.\nEsto es ventajoso porque permite la programación interactiva en un bucle de lectura-evaluación-impresión (REPL):\nel código introducido en la consola se ejecuta inmediatamente y el resultado se imprime, en lugar de esperar la etapa intermedia de compilación. Por otra parte, los lenguajes compilados, como C++ y Java, tienden ejecutarse más rápidamente (una vez que han sido compilados).C++ proporciona la base de muchos paquetes SIG, como QGIS, GRASS y SAGA, por lo que es un punto de partida apropiado.\nEl C++ bien escrito es muy rápido, lo que lo convierte en una buena opción para aplicaciones de rendimiento crítico, como el procesamiento de grandes conjuntos de datos geográficos, pero es más difícil de aprender que Python o R.\nEl C++ se ha vuelto más accesible con el paquete Rcpp, el cual proporciona una buena \" vía de entrada \" la programación en C para los usuarios de R.\nEl dominio de estos lenguajes de bajo nivel abre la posibilidad de crear nuevos “geoalgoritmos” de alto rendimiento y de comprender mejor el funcionamiento del software SIG (véase el capítulo ??).Java es otro lenguaje importante y versátil para la geocomputación.\nLos paquetes de SIG gvSig, OpenJump y uDig están escritos en Java.\nHay muchas bibliotecas de SIG escritas en Java, como GeoTools y JTS, la Topología Suite de Java (GEOS es un puerto C++ de JTS).\nAdemás, muchas aplicaciones de servidores de mapas utilizan Java, como Geoserver/Geonode, deegree y 52°North WPS.La sintaxis orientada objetos de Java es similar la de C++.\nUna de las principales ventajas de Java es que es independiente de las plataformas (lo que es inusual para un lenguaje compilado) y es altamente escalable, lo cual lo convierte en un lenguaje adecuado para IDEs como RStudio, con el cual se ha escrito este libro.\nJava tiene menos herramientas para el modelado estadístico y la visualización que Python o R, aunque puede utilizarse para la ciencia de datos (Brzustowicz 2017).Python es un lenguaje importante para la geocomputación, especialmente porque muchos SIG de escritorio, como GRASS, SAGA y QGIS, proporcionan una API de Python (véase el capítulo ??).\nAl igual que R, es una herramienta popular para la ciencia de los datos.\nAmbos lenguajes están orientados objetos y tienen muchas áreas de solapamiento, lo cual ha llevado iniciativas como el paquete reticulate, que facilita el acceso Python desde R, y la iniciativa de Ursa Labs para apoyar las bibliotecas portátiles en beneficio de todo el ecosistema de ciencia de datos de código abierto.En la práctica, tanto R como Python tienen sus puntos fuertes y, hasta cierto punto, cuál de ellos se utiliza es menos importante que el ámbito de aplicación y la comunicación de los resultados.\nEl aprendizaje de cualquiera de los dos permite empezar aprender el otro.\nSin embargo, R tiene grandes ventajas sobre Python para la geocomputación.\nEntre ellas se encuentra el hecho de que soporta mucho mejor los modelos de datos geográficos vectoriales y rasterizados en el propio lenguaje (véase el capítulo ??) y las correspondientes posibilidades de visualización (véanse los capítulos ?? y ??).\nIgualmente importante es el hecho de que R tiene un soporte incomparable para la estadística, incluida la estadística espacial, con cientos de paquetes (diferencia de Python) que soportan miles de métodos estadísticos.La mayor ventaja de Python es que es un lenguaje de programación de propósito general.\nSe utiliza en muchos ámbitos, como el software de escritorio, los juegos de ordenador, los sitios web y la ‘ciencia de los datos’.\nPython es menudo el único lenguaje compartido entre diferentes comunidades (de geocomputación) y puede considerarse como el “pegamento” que mantiene unidos muchos programas de SIG.\nSe puede acceder muchos geoalgoritmos, incluidos los de QGIS y ArcMap, desde la línea de comandos de Python, lo que lo convierte en un lenguaje idóneo para iniciarse en los SIG de línea de comandos.^[Los módulos de Python que proporcionan acceso los geoalgoritmos incluyen grass.script para GRASS,\nsaga-python para SAGA-GIS,\nprocessing para QGIS y arcpy para ArcGIS.\n]Sin embargo, para la estadística espacial y el modelado predictivo, R es considerablemente mejor.\nEsto significa que haya que elegir entre R o Python: Python soporta la mayoría de las técnicas estadísticas comunes (aunque R tiende soportar antes los nuevos desarrollos en estadística espacial) y muchos conceptos aprendidos en Python pueden aplicarse al mundo de R.\nAl igual que R, Python también soporta el análisis y la manipulación de datos geográficos con paquetes como osgeo, Shapely, NumPy y PyGeoProcessing (Garrard 2016).","code":""},{"path":"intro.html","id":"el-ecosistema-espacial-de-r","chapter":"1 Introducción","heading":"1.4 El ecosistema espacial de R","text":"Hay muchas maneras de manejar datos geográficos en R, con docenas de paquetes en el área.3\nEn este libro nos esforzamos por enseñar el estado del arte en el campo, al tiempo que nos aseguramos de que los métodos estén preparados para el futuro.\nAl igual que muchas áreas de desarrollo de software, el ecosistema espacial de R está evolucionando rápidamente (Figura 1.2).\nPuesto que R es de código abierto, estos desarrollos pueden construirse fácilmente partir de trabajos anteriores, “subiendo hombros de gigantes”, como dijo Isaac Newton en 1675.\nEste enfoque es ventajoso porque fomenta la colaboración y evita “reinventar la rueda”.\nEl paquete sf (tratado en el capítulo ??), por ejemplo, se basa en su predecesor sp.El aumento del tiempo de desarrollo (y del interés) en ‘R-spatial’ se ha producido tras la concesión de una subvención por parte del R Consortium para el desarrollo del soporte para Funciones Simples, un estándar y modelo de código abierto para almacenar y acceder geometrías vectoriales.\nEsto dio lugar al paquete sf (tratado en la sección ??).\nMúltiples sitios reflejan el inmenso interés por sf.\nEsto es especialmente cierto en el caso de los archivos de R-sig-Geo Archives, una lista de correos electrónicos en abierto que contiene mucha sabiduría de R-spatial acumulada lo largo de los años.\nFIGURE 1.2: La popularidad de los paquetes espaciales en R. El eje Y muestra el número medio de descargas por día, dentro de una ventana móvil de 30 días, de paquetes espaciales destacados.\nCabe destacar que los cambios en la comunidad de R en general, como por ejemplo el paquete de procesamiento de datos dplyr (publicado en 2014), han influido en los cambios del ecosistema espacial de R.\nJunto con otros paquetes que tienen un estilo compartido y un énfasis en los “datos ordenados” (“tidy data”) (incluyendo, por ejemplo, ggplot2), dplyr se colocó en el “metapaquete” tidyverse finales de 2016.El enfoque de tidyverse, centrado en los datos de forma larga y en las funciones rápidas de nombre intuitivo, se ha hecho inmensamente popular.\nEsto ha dado lugar una demanda de “datos geográficos ordenados” que ha sido satisfecha en parte por sf y otros enfoques como tabularaster.\nUna característica evidente del tidyverse es la tendencia que los paquetes trabajen en armonía.\nexiste un ‘geoverso’ equivalente, pero hay intentos de armonización entre los paquetes alojados en la organización r-spatial y el número creciente de paquetes que utilizan sf (Tabla 1.2).TABLE 1.2: Los 5 paquetes más descargados que dependen de sf, en términos de número medio de descargas por día durante el mes anterior. partir del 2021-08-22 hay 383 paquetes que importan sf.","code":""},{"path":"intro.html","id":"la-historia-de-r-spatial","chapter":"1 Introducción","heading":"1.5 La historia de R-spatial","text":"El uso de paquetes espaciales recientes como sf tiene muchas ventajas, pero también es importante ser consciente de la historia de las capacidades espaciales de R: muchas funciones, casos de uso y material didáctico están contenidos en paquetes más antiguos.\nEstos pueden seguir siendo útiles hoy en día, siempre que se sepa dónde buscar.\n\nLas capacidades espaciales de R se originaron en los primeros paquetes espaciales del lenguaje S (Bivand Gebhardt 2000).\n\nEn la década de 1990 se desarrollaron numerosos scripts en S y un puñado de paquetes para la estadística espacial.\nLos paquetes de R surgieron partir de ellos y en el año 2000 había paquetes de R para varios métodos espaciales “análisis de patrones puntuales, geoestadística, análisis exploratorio de datos espaciales y econometría espacial”, según un artículo presentado en GeoComputation 2000 (Bivand Neteler 2000).\nAlgunos de ellos, especialmente spatial, sgeostat y splancs, siguen estando disponibles en CRAN (Rowlingson Diggle 1993, 2017; Venables Ripley 2002; Majure Gebhardt 2016).Un artículo posterior en R News (el predecesor de R Journal) contenía una visión general del software estadístico espacial en R en ese momento, gran parte del cual se basaba en código anterior escrito para S/S-PLUS (Ripley 2001).\nEsta visión general describía paquetes para el suavizado y la interpolación espacial, incluyendo akima y geoR (Akima Gebhardt 2016; Ribeiro Jr Diggle 2016), y el análisis de patrones de puntos, incluyendo splancs (Rowlingson Diggle 2017) y spatstat (Baddeley, Rubak, Turner 2015).La siguiente publicación de R News (Volumen 1/3) volvió poner los paquetes espaciales en el punto de mira, con una introducción más detallada splancs y un comentario sobre las perspectivas futuras de la estadística espacial (Bivand 2001).\nAdemás, la publicación introdujo dos paquetes para probar la autocorrelación espacial que finalmente se convirtieron en parte de spdep (Bivand 2017).\nEn particular, el comentario menciona la necesidad de estandarizar las interfaces espaciales, los mecanismos eficientes para el intercambio de datos con SIG y el manejo de metadatos espaciales como los sistemas de referencia de coordenadas (CRS).maptools (escrito por Nicholas Lewin-Koh; Bivand Lewin-Koh 2017) es otro paquete importante de esta época.\nInicialmente, maptools solo contenía una envoltura alrededor de shapelib y permitía la lectura de ESRI Shapefiles en listas anidadas de geometría.\nLa clase S3 correspondiente y hoy en día obsoleta llamada “Map” almacenaba esta lista junto un dataframe de atributos.\nEl trabajo sobre la representación de la clase “Map” fue, sin embargo, importante, ya que alimentó directamente sp antes de su publicación en CRAN.En 2003, Roger Bivand publicó una revisión extendida de los paquetes espaciales.\nPropuso un sistema de clases para soportar los “objetos de datos ofrecidos por GDAL”, incluyendo los tipos ‘fundamentales’ punto, línea, polígono y raster.\nAdemás, sugería que las interfaces con bibliotecas externas debían ser la base de los paquetes modulares de R (Bivand 2003).\nEn gran medida, estas ideas se materializaron en los paquetes rgdal y sp.\nEstos proporcionaron una base para el análisis de datos espaciales con R, tal como se describe en Análisis de datos espaciales aplicados con R (Applied Spatial Data Analysis R en inglés) (ASDAR) (Bivand, Pebesma, Gómez-Rubio 2013), publicado por primera vez en 2008.\nDiez años más tarde, las capacidades espaciales de R han evolucionado sustancialmente, pero siguen basándose en las ideas expuestas por Bivand (2003):\nlas interfaces para GDAL y PROJ, por ejemplo, siguen potenciando las capacidades de /O de datos geográficos de alto rendimiento y de transformación de CRS (véanse los capítulos ?? y ??, respectivamente).rgdal, publicado en 2003, proporcionó vínculos GDAL para R que mejoraron en gran medida su capacidad para importar datos de formatos de datos geográficos que antes estaban disponibles.\nLa versión inicial sólo admitía controladores raster, pero las mejoras posteriores proporcionaron soporte para sistemas de referencia de coordenadas (través de la librería PROJ), reproyecciones e importación de formatos de archivos vectoriales (véase el capítulo ?? para más información sobre los formatos de archivo).\nMuchas de estas capacidades adicionales fueron desarrolladas por Barry Rowlingson y publicadas en el código base de rgdal en 2006 (véase Rowlingson et al. 2003 y R-help(véase Rowlingson et al. 2003 y la lista de correos electrónicos de R-help para el contexto).sp, publicado en 2005, superó la incapacidad de R para distinguir entre los objetos espaciales y los espaciales (Pebesma Bivand 2005).\nsp surgió de un taller celebrado en Viena en 2003 y estuvo alojado en sourceforge antes de migrar R-Forge.\n\n\nAntes de 2005, las coordenadas geográficas se trataban generalmente como cualquier otro número.\nsp cambió esto con sus clases y métodos genéricos que soportan puntos, líneas, polígonos y cuadrículas, y datos de atributos.sp almacena información como el cuadro delimitador, el sistema de referencia de coordenadas y los atributos en ranuras de objetos espaciales que utilizan el sistema de clases S4, lo que permite que las operaciones de datos funcionen con datos geográficos (véase la sección ??).\nAdemás, sp proporciona métodos genéricos como summary() y plot() para datos geográficos.\nEn la década siguiente, las clases sp se popularizaron rápidamente para los datos geográficos en R y el número de paquetes que dependían de él se incrementó de unos 20 en 2008 más de 100 en 2013 (Bivand, Pebesma, Gómez-Rubio 2013).En 2018, casi 500 paquetes dependen de sp, lo que lo convierte en una parte importante del ecosistema de R.\nEntre los paquetes R más destacados que utilizan sp se encuentran: gstat, para geoestadística espacial y espacio-temporal; geosphere, para trigonometría esférica; y adehabitat, utilizado para el análisis de la selección de hábitat por parte de los animales (Pebesma Graeler 2018; Calenge 2006; Hijmans 2016).Mientras que rgdal y sp resolvían muchos problemas espaciales, R seguía careciendo de la capacidad de realizar operaciones geométricas (véase el capítulo ??).\nColin Rundel abordó este problema desarrollando rgeos, una interfaz de R para la librería de geometría en código abierto (GEOS) durante un proyecto de Google Summer Code en 2010 (Bivand Rundel 2018).\nrgeos permitió GEOS manipular objetos sp, con funciones como gIntersection().Otra limitación de sp — su limitado apoyo los datos raster — fue superada por raster, publicado por primera vez en 2010 (Hijmans 2017).\nSu sistema de clases y sus funciones soportan una serie de operaciones de rasterización, como se indica en la sección ??.\nUna característica clave de raster es su capacidad para trabajar con conjuntos de datos que son demasiado grandes para caber en la memoria RAM (la interfaz de R con PostGIS admite operaciones fuera del disco sobre datos geográficos vectoriales).\nraster también admite el álgebra de mapas (véase la sección ??).Paralelamente estos desarrollos de sistemas de clases y métodos, llegó el apoyo R como interfaz para el software SIG dedicado.\nGRASS (R. S. Bivand 2000) y los paquetes posteriores spgrass6 y rgrass7 (para GRASS GIS 6 y 7, respectivamente) fueron ejemplos destacados en esta dirección (Bivand 2016a, 2016b).\nOtros ejemplos de puentes entre R y SIG son RSAGA (Brenning, Bangs, Becker 2018, publicado por primera vez en 2008), RPyGeo (Brenning 2012, publicado por primera vez en 2008) y RQGIS (Muenchow, Schratz, Brenning 2017, publicado por primera vez en 2016) (véase el capítulo ??).La visualización fue un foco de atención al principio, ya que la mayor parte del desarrollo de R-spatial se centró en el análisis y las operaciones geográficas.\nsp proporcionó métodos para la elaboración de mapas utilizando el sistema de graficación de base y de lattice, pero la demanda estaba creciendo para las capacidades de elaboración de mapas avanzados, especialmente después del lanzamiento de ggplot2 en 2007.\nggmap amplió las capacidades espaciales de ggplot2 (Kahle Wickham 2013), facilitando el acceso los segmentos del “basemap” desde servicios en línea como Google Maps.\nAunque ggmap facilitaba la elaboración de mapas con ggplot2, su utilidad estaba limitada por la necesidad de fortificar los objetos espaciales, lo que significa convertirlos en largos dataframes.\nAunque esto funciona bien para los puntos, es computacionalmente ineficiente para las líneas y los polígonos, ya que cada coordenada (vértice) se convierte en una fila, lo que da lugar enormes dataframes para representar geometrías complejas.\nAunque la visualización geográfica tendía centrarse en los datos vectoriales, la visualización rasterizada está soportada en raster y recibió un impulso con el lanzamiento de rasterVis, el cual se describe en un libro sobre el tema de la visualización de datos espaciales y temporales (Lamigueiro 2018).\npartir de 2018, la creación de mapas en R es un tema candente con paquetes dedicados como tmap, leaflet y mapview, todos ellos compatibles con el sistema de clases proporcionado por sf, en el cual se centra el siguiente capítulo (véase el capítulo ?? para obtener más información sobre la visualización).","code":""},{"path":"intro.html","id":"ejercicios","chapter":"1 Introducción","heading":"1.6 Ejercicios","text":"Piensa en los términos “SIG” (Sistemas de Información Geográfica o GIS en inglés), “GDS” y “geocomputación” descritos anteriormente. ¿Cuál de ellos (si es que hay alguno) describe mejor el trabajo que te gustaría realizar utilizando métodos y software de geocomputación y por qué?Piensa en los términos “SIG” (Sistemas de Información Geográfica o GIS en inglés), “GDS” y “geocomputación” descritos anteriormente. ¿Cuál de ellos (si es que hay alguno) describe mejor el trabajo que te gustaría realizar utilizando métodos y software de geocomputación y por qué?Indica tres razones para utilizar un lenguaje de programación como R para la geocomputación en lugar de utilizar un programa SIG establecido como QGIS.Indica tres razones para utilizar un lenguaje de programación como R para la geocomputación en lugar de utilizar un programa SIG establecido como QGIS.Menciona dos ventajas y dos desventajas sobre utilizar paquetes maduros frente los recientes para el análisis de datos geográficos (por ejemplo, sp frente sf).Menciona dos ventajas y dos desventajas sobre utilizar paquetes maduros frente los recientes para el análisis de datos geográficos (por ejemplo, sp frente sf).Akima, Hiroshi, Albrecht Gebhardt. 2016. Akima: Interpolation Irregularly Regularly Spaced Data.Baddeley, Adrian, Ege Rubak, Rolf Turner. 2015. Spatial Point Patterns: Methodology Applications R. CRC Press.Bivand, Roger. 2001. “Spatial Data Analysis.” R News 1 (3): 13–17.———. 2003. “Approaches Classes Spatial Data R.” Proceedings DSC, edited Kurt Hornik, Friedrich Leisch, Achim Zeileis.———. 2016a. Rgrass7: Interface GRASS 7 Geographical Information System R.———. 2016b. Spgrass6: Interface GRASS 6 R.———. 2017. Spdep: Spatial Dependence: Weighting Schemes, Statistics Models.Bivand, Roger, Albrecht Gebhardt. 2000. “Implementing Functions Spatial Statistical Analysis Using Language.” Journal Geographical Systems 2 (3): 307–17.Bivand, Roger, Nicholas Lewin-Koh. 2017. Maptools: Tools Reading Handling Spatial Objects.Bivand, Roger, Markus Neteler. 2000. “Open Source Geocomputation: Using R Data Analysis Language Integrated GRASS GIS PostgreSQL Data Base Systems.” Proceedings 5th International Conference GeoComputation, edited Markus Neteler Roger S. Bivand.Bivand, Roger, Edzer J Pebesma, Virgilio Gómez-Rubio. 2013. Applied Spatial Data Analysis R. Vol. 747248717. Springer.Bivand, Roger, Colin Rundel. 2018. Rgeos: Interface Geometry Engine - Open Source (’Geos’). https://CRAN.R-project.org/package=rgeos.Bivand, Roger S. 2000. “Using R Statistical Data Analysis Language GRASS 5.0 GIS Database Files.” Computers & Geosciences 26 (9): 1043–52.Brenning, Alexander. 2012. ArcGIS Geoprocessing R via Python.Brenning, Alexander, Donovan Bangs, Marc Becker. 2018. RSAGA: SAGA Geoprocessing Terrain Analysis. https://CRAN.R-project.org/package=RSAGA.Brzustowicz, Michael R. 2017. Data Science Java: [Practical Methods Scientists Engineers]. First. Beijing Boston Farnham: OReilly.Calenge, C. 2006. “Package Adehabitat R Software: Tool Analysis Space Habitat Use Animals.” Ecological Modelling 197: 1035.Chambers, John M. 2016. Extending R. CRC Press.Coppock, J Terry, David W Rhind. 1991. “History GIS.” Geographical Information Systems: Principles Applications, Vol. 1. 1 (1): 21–43.Eddelbuettel, Dirk, James Joseph Balamuta. 2018. “Extending R C++: Brief Introduction Rcpp.” American Statistician 72 (1): 28–36. https://doi.org/10.1080/00031305.2017.1375990.Garrard, Chris. 2016. Geoprocessing Python. Shelter Island, NY: Manning Publications.Gillespie, Colin, Robin Lovelace. 2016. Efficient R Programming: Practical Guide Smarter Programming. O’Reilly Media.Grolemund, Garrett, Hadley Wickham. 2016. R Data Science. O’Reilly Media.Hijmans, Robert J. 2016. Geosphere: Spherical Trigonometry.———. 2017. Raster: Geographic Data Analysis Modeling. https://CRAN.R-project.org/package=raster.Kahle, D, Hadley Wickham. 2013. “Ggmap: Spatial Visualization Ggplot2.” R Journal 5: 144–61.Lamigueiro, Oscar Perpinan. 2018. Displaying Time Series, Spatial, Space-Time Data R. Second. Boca Raton: Chapman Hall/CRC.Livingstone, David N. 1992. Geographical Tradition: Episodes History Contested Enterprise. Oxford, UK ; Cambridge, USA: John Wiley & Sons Ltd.Longley, Paul. 2015. Geographic Information Science & Systems. Fourth edition. Hoboken, NJ: Wiley.Longley, Paul ., Sue M. Brooks, Rachael McDonnell, Bill MacMillan, eds. 1998. Geocomputation: Primer. Chichester, Eng. ; New York: Wiley.Majure, James J., Albrecht Gebhardt. 2016. Sgeostat: Object-Oriented Framework Geostatistical Modeling S+.Muenchow, Jannes, Patrick Schratz, Alexander Brenning. 2017. “RQGIS: Integrating R QGIS Statistical Geocomputing.” R Journal 9 (2): 409–28.Neteler, Markus, Helena Mitasova. 2008. Open Source GIS: GRASS GIS Approach. Third. New York, NY: Springer.Openshaw, Stan, Robert J. Abrahart, eds. 2000. Geocomputation. London ; New York: CRC Press.Pebesma, Edzer, Benedikt Graeler. 2018. Gstat: Spatial Spatio-Temporal Geostatistical Modelling, Prediction Simulation. https://CRAN.R-project.org/package=gstat.Pebesma, Edzer J, Roger S Bivand. 2005. “Classes Methods Spatial Data R.” R News 5 (2): 9–13.Pebesma, Edzer, Daniel Nüst, Roger Bivand. 2012. “R Software Environment Reproducible Geoscientific Research.” Eos, Transactions American Geophysical Union 93 (16): 163–63. https://doi.org/10.1029/2012EO160003.Ribeiro Jr, Paulo J., Peter J. Diggle. 2016. geoR: Analysis Geostatistical Data.Ripley, Brian D. 2001. “Spatial Statistics R.” R News 1 (2): 14–15.Rowlingson, Barry, Adrian Baddeley, Rolf Turner, Peter Diggle. 2003. “Rasp: Package Spatial Statistics.” Proceedings 3rd International Workshop Distributed Statistical Computing, edited Kurt Hornik.Rowlingson, Barry, Peter Diggle. 2017. Splancs: Spatial Space-Time Point Pattern Analysis.Rowlingson, B. S, P. J Diggle. 1993. “Splancs: Spatial Point Pattern Analysis Code S-Plus.” Computers & Geosciences 19 (5): 627–55. https://doi.org/10.1016/0098-3004(93)90099-Q.Sherman, Gary. 2008. Desktop GIS: Mapping Planet Open Source Tools. Pragmatic Bookshelf.Talbert, Richard J. . 2014. Ancient Perspectives: Maps Place Mesopotamia, Egypt, Greece, Rome. University Chicago Press.Economist. 2016. “Autonomous Car’s Reality Check.” Economist.Venables, W. N., B. D. Ripley. 2002. Modern Applied Statistics S. Fourth. New York: Springer.Venables, W. N., D. M. Smith, R Core Team. 2017. Introduction R. Notes R: Programming Environment Data Analysis Graphics.Wickham, Hadley. 2014. Advanced R. CRC Press.Wulf, Andrea. 2015. Invention Nature: Alexander von Humboldt’s New World. New York: Alfred . Knopf.","code":""}]
